name: "[CI] Deploy Terraform stacks"
on:
  workflow_call:
    inputs:
      environment_name:
        required: false
        default: dev
        type: string
      aws_region:
        required: false
        default: eu-west-2
        type: string
      destructive_action_check:
        required: false
        type: boolean
        default: false
      checkov_deep_scan:
        required: false
        type: boolean
        default: false
      tf_action:
        required: false
        type: string
        default: "plan"
      destroy_before_apply:
        required: false
        type: boolean
        default: false
      repo:
        required: false
        type: string
        default: ${{ github.repository }}
        description: "Specify the org/repo of the repo containing Terraform code. Normally left blank to clone calling repo."
      ref:
        required: false
        type: string
        default: ${{ github.ref }}
        description: "Specify the branch of the Terraform code. Normally left blank to use calling ref."

    secrets:
      AWS_ROLE_NAME:
        required: false
      AWS_ACCOUNT_ID:
        required: false
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      AZURE_SUBSCRIPTION_ID:
        required: false
      AZURE_TENANT_ID:
        required: false
      AZURE_CLIENT_ID:
        required: false
      AZURE_RESOURCE_GROUP_NAME:
        required: false
      TF_MODULES_SSH_DEPLOY_KEY:
        required: false
        description: "The SSH key used to clone Terraform modules downloaded as part of the Terraform init"
      REPO_SSH_DEPLOY_KEY:
        required: false
        description: "The SSH key used to checkout private remote repos"
      SSH_DEPLOY_KEY:
        required: false
        description: "Deprecated: Use either TF_MODULES_SSH_DEPLOY_KEY or REPO_SSH_DEPLOY_KEY instead."
        
jobs:
  check:
    name: Lint and SAST Scan Terraform code
    if: ${{ !contains('tst,pre,prd', inputs.environment_name) }}
    uses: ./.github/workflows/terraform-code-check.yml

  destroy:
    name: Destroy existing infrastructure
    if: ${{ inputs.destroy_before_apply }}
    uses: ./.github/workflows/terraform-destroy.yml
    with:
      environment_name: ${{ inputs.environment_name }}
      aws_region: ${{ inputs.aws_region }}
      repo: ${{ inputs.repo }}
      ref:  ${{ inputs.ref }}
    secrets: inherit

  define_matrix:
    name: Define directory matrix for build
    runs-on: ubuntu-latest
    outputs:
      directories: "${{ steps.directories.outputs.json_directory_list }}"
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.ref }}
          ssh-key: ${{ secrets.REPO_SSH_DEPLOY_KEY }}
      - name: Determine order to run Terraform stacks
        uses: >-
          UKHSA-Internal/devops-github-actions/.github/actions/terraform-dependency-sort@main
        id: directories

  plan:
    name: "Plan Infrastructure - ${{ matrix.directory }}"
    runs-on: ubuntu-latest
    environment: "${{ inputs.environment_name }}"
    if: always() && (needs.destroy.result == 'skipped' || needs.destroy.result == 'success')
    uses: ./.github/workflows/terraform-core.yml
    defaults:
      run:
        shell: bash
    needs:
      - define_matrix
      - check
      - destroy
    with:
      environment_name: ${{ inputs.environment_name }}
      aws_region: ${{ inputs.aws_region }}
      repo: ${{ inputs.repo }}
      ref:  ${{ inputs.ref }}
      directories: "${{ needs.define_matrix.outputs.directories }}"
      tf_action: 'plan'
      destructive_action_check: ${{ inputs.destructive_action_check }}
    secrets: inherit

  deep_check:
    name: "Deep checks for ${{ matrix.directory }}"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs:
      - define_matrix
      - plan
    strategy:
      matrix:
        directory: "${{ fromJSON(needs.define_matrix.outputs.directories) }}"
      max-parallel: 5
    steps:
      - uses: actions/checkout@v4

      - name: Download Terraform plan to workflow
        uses: actions/download-artifact@v4
        with: 
          name: "${{ matrix.directory }}/tfplan"
          path: "${{ matrix.directory }}"
      
      - name: SAST Scanning with Checkov (Deep)
        if: >-
            ${{ inputs.checkov_deep_scan ||
              inputs.environment_name == 'pre' || 
              inputs.environment_name == 'prd' }}
        uses: UKHSA-Internal/devops-github-actions/.github/actions/terraform-checkov-scan@main
        with:
          scan_type: deep
          tfplan_file: "${{ matrix.directory }}/tfplan.json"
          scan_directory: "${{ matrix.directory }}"

  apply:
    name: "Apply Infrastructure - ${{ matrix.directory }}"
    if: ${{ inputs.tf_action == "apply" }}
    runs-on: ubuntu-latest
    environment: "${{ inputs.environment_name }}"
    uses: ./.github/workflows/terraform-core.yml
    defaults:
      run:
        shell: bash
    needs:
      - define_matrix
      - plan
      - deep_check
    with:
      environment_name: ${{ inputs.environment_name }}
      aws_region: ${{ inputs.aws_region }}
      repo: ${{ inputs.repo }}
      ref:  ${{ inputs.ref }}
      directories: "${{ needs.define_matrix.outputs.directories }}"
      tf_action: 'apply'
      destructive_action_check: ${{ inputs.destructive_action_check }}
    secrets: inherit

  post-deployment-qa-checks:
    name: Run post deployment QA checks.
    uses: ./.github/workflows/terraform-post-deployment-qa.yml
    needs: apply
    with:
      environment_name: ${{ inputs.environment_name }}
      aws_region: ${{ inputs.aws_region }}
    secrets: inherit