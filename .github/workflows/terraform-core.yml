name: "[Setup] Initialise and perform Terraform actions"
on:
  workflow_call:
    inputs:
      environment_name:
        required: false
        default: dev
        type: string
      aws_region:
        required: false
        default: eu-west-2
        type: string
      destructive_action_check:
        required: false
        type: boolean
        default: false
      apply_terraform:
        required: false
        type: boolean
        default: true
      terraform_action:
        required: false
        type: string
        default: "apply"
        description: "'apply' or 'destroy'. Has no effect if `apply_terraform` is false."
      directories:
        description: "The list of directories for the matrix"
        required: true
        type: string
      repo:
        required: false
        type: string
        default: ${{ github.repository }}
        description: "Specify the org/repo of the repo containing Terraform code. Normally left blank to clone calling repo."
      ref:
        required: false
        type: string
        default: ${{ github.ref }}
        description: "Specify the branch of the Terraform code. Normally left blank to use calling ref."

    secrets:
      AWS_ROLE_NAME:
        required: false
      AWS_ACCOUNT_ID:
        required: false
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      AZURE_SUBSCRIPTION_ID:
        required: false
      AZURE_TENANT_ID:
        required: false
      AZURE_CLIENT_ID:
        required: false
      AZURE_RESOURCE_GROUP_NAME:
        required: false
      TF_MODULES_SSH_DEPLOY_KEY:
        required: false
        description: "The SSH key used to clone Terraform modules downloaded as part of the Terraform init"
      REPO_SSH_DEPLOY_KEY:
        required: false
        description: "The SSH key used to checkout private remote repos"
      SSH_DEPLOY_KEY:
        required: false
        description: "Deprecated: Use either TF_MODULES_SSH_DEPLOY_KEY or REPO_SSH_DEPLOY_KEY instead."
        
jobs:
  initialise:
    name: "Initialise and run Terraform for - ${{ matrix.directory }}"
    runs-on: ubuntu-latest
    environment: "${{ inputs.environment_name }}"
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        directory: "${{ fromJSON(inputs.directories) }}"
      # Intentionally kept to run to prevent race conditions.
      max-parallel: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.ref }}
          ssh-key: ${{ secrets.REPO_SSH_DEPLOY_KEY }}

      - name: Print environment
        run: |
          echo "## ${{ matrix.directory }} ##" >> $GITHUB_STEP_SUMMARY
          echo "environment_name: ${{ inputs.environment_name }}" >> $GITHUB_STEP_SUMMARY
          echo "aws_region: ${{ inputs.aws_region }}" >> $GITHUB_STEP_SUMMARY
          echo "destructive_action_check: ${{ inputs.destructive_action_check }}" >> $GITHUB_STEP_SUMMARY
          echo "apply_terraform: ${{ inputs.apply_terraform }}" >> $GITHUB_STEP_SUMMARY
          echo "terraform_action: ${{ inputs.terraform_action }}" >> $GITHUB_STEP_SUMMARY
          echo "directories: ${{ inputs.directories }}" >> $GITHUB_STEP_SUMMARY
          echo "repo: ${{ inputs.repo }}" >> $GITHUB_STEP_SUMMARY
          echo "ref: ${{ inputs.ref }}" >> $GITHUB_STEP_SUMMARY
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        env:
          AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          AWS_ACCOUNT_ID: "${{ secrets.AWS_ACCOUNT_ID }}"
          AWS_ROLE_NAME: "${{ secrets.AWS_ROLE_NAME }}"
        if: ${{ env.AWS_ROLE_NAME != '' && env.AWS_ACCOUNT_ID != '' }}
        with:
          aws-region: "${{ inputs.aws_region }}"
          role-to-assume: "arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_ROLE_NAME }}"
          aws-access-key-id: "${{ env.AWS_ACCESS_KEY_ID }}"
          aws-secret-access-key: "${{ env.AWS_SECRET_ACCESS_KEY }}"

      - name: Configure Azure Credentials
        uses: azure/login@v2
        env:
          AZURE_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
          AZURE_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
          AZURE_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        if: >-
          ${{ env.AZURE_CLIENT_ID != '' && env.AZURE_TENANT_ID != '' &&
          env.AZURE_SUBSCRIPTION_ID != '' }}
        with:
          client-id: "${{ env.AZURE_CLIENT_ID }}"
          tenant-id: "${{ env.AZURE_TENANT_ID }}"
          subscription-id: "${{ env.AZURE_SUBSCRIPTION_ID }}"

      - name: Copy required files from root directory
        env:
          DIRECTORY: "${{ matrix.directory }}"
        run: |
          files_to_copy=("providers.tf" "terraform.tf")

          for FILE in "${files_to_copy[@]}"; do
            if [[ ! -f "$DIRECTORY"/"$FILE" ]]; then
                echo "WARN - $(basename "$DIRECTORY") is missing a "$FILE" file! This behaviour is deprecated - please ensure each stack has its own "$FILE" file."
                cp "$FILE" "$DIRECTORY"/
            else
              echo "NOTE - $(basename "$DIRECTORY") has its own "$FILE" file. Not copying "$FILE" from root"
            fi
          done

      - name: Find Terraform version
        uses: UKHSA-Internal/devops-github-actions/.github/actions/parse-terraform-version@main
        id: terraform_version
        with:
          tf_file: "${{ matrix.directory }}/terraform.tf"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "${{ steps.terraform_version.outputs.tf_version }}"

      - name: Determine Backend Type
        working-directory: "${{ matrix.directory }}"
        id: backend
        run: |
          backend_type=$(grep -oP 'backend\s+"?\K[^"\s]+' ./backend.tf)
          echo "backend_type=$backend_type" >> $GITHUB_OUTPUT

      - name: Add SSH deploy key to ssh-agent
        env:
          SSH_DEPLOY_KEY: "${{ secrets.TF_MODULES_SSH_DEPLOY_KEY || secrets.SSH_DEPLOY_KEY }}"
        run: |
          # Add SSH deploy key to ssh-agent to allow internal or private UKHSA-Internal
          # modules to be downloaded during terraform init.
          if [ -n "$SSH_DEPLOY_KEY" ]; then
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            eval $(ssh-agent -s)
            echo "$SSH_DEPLOY_KEY" | tr -d '\r' | ssh-add -
          fi

      - name: Terraform Init with AWS S3 Backend
        working-directory: "${{ matrix.directory }}"
        if: ${{ steps.backend.outputs.backend_type == 's3' }}
        env:
          AWS_ACCOUNT_ID: "${{ secrets.AWS_ACCOUNT_ID }}"
          AWS_REGION: "${{ inputs.aws_region }}"
          ENVIRONMENT_NAME: "${{ inputs.environment_name }}"
          DIRECTORY: "${{ matrix.directory }}"
        run: |
          state_name=$(basename "$DIRECTORY")
          terraform init \
            -backend-config=dynamodb_table="${AWS_REGION}"-state-locks \
            -backend-config=bucket="${AWS_ACCOUNT_ID}"-"${AWS_REGION}"-state \
            -backend-config=key="${ENVIRONMENT_NAME}"/"$state_name"/terraform.tfstate

      - name: Terraform Init with Azure Backend
        if: ${{ steps.backend.outputs.backend_type == 'azurerm' }}
        working-directory: "${{ matrix.directory }}"
        env:
          ENVIRONMENT_NAME: "${{ inputs.environment_name }}"
          DIRECTORY: "${{ matrix.directory }}"
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
        run: |
          state_name=$(basename "$DIRECTORY")
          # Container name needs to be a valid DNS name with less than 63 characters.
          container_name=$(dirname "$DIRECTORY" | tr -cd '[:alnum:]-' | cut -c1-62)
          storage_account_name=$(echo "${{ secrets.AZURE_SUBSCRIPTION_ID }}" | tr -d '-' | cut -c 1-12)state
          terraform init \
            -backend-config=storage_account_name="${storage_account_name}" \
            -backend-config=container_name="$container_name" \
            -backend-config=key="${ENVIRONMENT_NAME}"/"$state_name"/terraform.tfstate \
            -backend-config=resource_group_name="${{ secrets.AZURE_RESOURCE_GROUP_NAME }}"

      - name: Find Terraform variables
        id: variables
        env:
          DIRECTORY: "${{ matrix.directory }}"
          ENVIRONMENT_NAME: "${{ inputs.environment_name }}"
        run: |
          find_app_var_files() {
            local dir=$1
            local state_name=$(basename "$dir")
            local tfvars="./$dir/tfvars/${state_name}-${ENVIRONMENT_NAME}.tfvars"
            local json="./$dir/tfvars/${state_name}-${ENVIRONMENT_NAME}.tfvars.json"
            if [[ -f "$tfvars" ]]; then
              echo "-var-file=$(readlink -f $tfvars)"
            elif [[ -f "$json" ]]; then
              echo "-var-file=$(readlink -f $json)"
            fi
          }

          find_env_var_files() {
            local tfvars="./environment/${ENVIRONMENT_NAME}.tfvars"
            local json="./environment/${ENVIRONMENT_NAME}.tfvars.json"
            if [[ -f "$tfvars" ]]; then
              echo "-var-file=$(readlink -f $tfvars)"
            elif [[ -f "$json" ]]; then
              echo "-var-file=$(readlink -f $json)"
            fi
          }

          find_global_var_file() {
            local tfvars="globals.tfvars"
            local json="globals.tfvars.json"
            if [[ -f "$tfvars" ]]; then
              echo "-var-file=$(readlink -f $tfvars)"
            elif [[ -f "$json" ]]; then
              echo "-var-file=$(readlink -f $json)"
            fi
          }

          global_vars_file=$(find_global_var_file)
          app_var_file=$(find_app_var_files "$DIRECTORY")
          env_var_file=$(find_env_var_files)
          full_variable_flags="$global_vars_file $app_var_file $env_var_file"

          echo "tf_vars=$full_variable_flags" >> $GITHUB_OUTPUT

      - name: Terraform Plan
        working-directory: "${{ matrix.directory }}"
        env:
          ENVIRONMENT_NAME: "${{ inputs.environment_name }}"
          TERRAFORM_VARIABLES: "${{ steps.variables.outputs.tf_vars }}"
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
          TERRAFORM_ACTION: ${{ secrets.terraform_action }}
        run: |
          if [[ "$TERRAFORM_ACTION" == "destroy" ]]; then
            terraform plan -destroy -no-color -input=false -out=tfplan -compact-warnings ${TERRAFORM_VARIABLES}
          else
            terraform plan -no-color -input=false -out=tfplan -compact-warnings ${TERRAFORM_VARIABLES}
          fi

          terraform show -json tfplan | jq > tfplan.json

      - name: Terraform Destructive Actions Check
        working-directory: "${{ matrix.directory }}"
        if: >-
            ${{ ( inputs.destructive_action_check ||
              inputs.environment_name == 'pre' || 
              inputs.environment_name == 'prd' ) &&
              inputs.terraform_action != 'destroy' }}
        run: |
          delete_count=$(terraform show -json tfplan | jq -r '([.resource_changes[]?.change?.actions?] | flatten) + ([.output_changes[]?.actions?] | flatten) | (map(select(.=="delete")) | length)')

          if [[ "$delete_count" -gt "0" ]]; then
            echo ":heavy_exclamation_mark: WARNING - "$delete_count" resources will be destroyed in $(basename `pwd`)!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Terraform Apply
        if: ${{ inputs.apply_terraform }} 
        working-directory: "${{ matrix.directory }}"
        env:
          ENVIRONMENT_NAME: "${{ inputs.environment_name }}"
          TERRAFORM_VARIABLES: "${{ steps.variables.outputs.tf_vars }}"
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
        run: terraform apply -no-color -input=false tfplan
